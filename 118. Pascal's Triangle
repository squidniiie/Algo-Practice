/**
 * 118. Pascal's Triangle
 * Given an integer numRows, return the first numRows of Pascal's triangle.

In Pascal's triangle, each number is the sum of the two numbers directly above it as shown:

Example 1:

Input: numRows = 5
Output: [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1]]

// I changed the spacing for example 2
Example 2:
Input: numRows = 1
Output: [[1]]
 
Constraints:

1 <= numRows <= 30

 * @param {number} numRows
 * @return {number[][]}
 */
var generate = function (numRows) {
    let pascal = [];

    if (numRows === 0) {
        return pascal;
    }

    pascal.push([1])

    let lastLevel = []
    while (pascal.length < numRows) {
        let newLevel = [1]
        for (let i = 0; i < lastLevel.length - 1; i++) {
            newLevel.push(lastLevel[i] + lastLevel[i + 1])
        }
        newLevel.push(1);
        pascal.push(newLevel);
        lastLevel = newLevel;
    }
    return pascal;
};



