// 977. Squares of a Sorted Array

// Given an integer array nums sorted in non-decreasing order, return an array of the squares of each number sorted in non-decreasing order.

// Example 1:

// Input: nums = [-4,-1,0,3,10]
// Output: [0,1,9,16,100]
// Explanation: After squaring, the array becomes [16,1,0,9,100].
// After sorting, it becomes [0,1,9,16,100].

// Example 2:

// Input: nums = [-7,-3,2,3,11]
// Output: [4,9,9,49,121]


// Constraints:

// 1 <= nums.length <= 104
// -104 <= nums[i] <= 104
// nums is sorted in non-decreasing order.

/**
 * @param {number[]} nums
 * @return {number[]}
 */
var sortedSquares = function (nums) {
    // first create a new array
    let sortedArr = new Array(nums.length)
    // establish variables to keep track of the 
    // beginning and end of the array
    let start = 0;
    let end = nums.length - 1;
    // we want i to equal end and move backwards so
    // that we insert our values from the end of
    // the new sorted array 
    for (let i = end; i >= 0; i--) {
        // create squared values of our variables
        let sqStart = Math.pow(nums[start], 2);
        let sqEnd = Math.pow(nums[end], 2);
        // we're going to place the bigger number at the end 
        // the array because our nums array is already sorted
        if (sqStart > sqEnd) {
            sortedArr[i] = sqStart;
            start++;
        }
        else {
            sortedArr[i] = sqEnd;
            end--;
        }
    }
    // return our new array
    return sortedArr
};
