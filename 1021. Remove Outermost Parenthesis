// A valid parentheses string is either empty "", "(" + A + ")", or A + B, where A and B are valid parentheses strings, and + represents string concatenation.

// For example, "", "()", "(())()", and "(()(()))" are all valid parentheses strings.
// A valid parentheses string s is primitive if it is nonempty, and there does not exist a way to split it into s = A + B, with A and B nonempty valid parentheses strings.

// Given a valid parentheses string s, consider its primitive decomposition: s = P1 + P2 + ... + Pk, where Pi are primitive valid parentheses strings.

// Return s after removing the outermost parentheses of every primitive string in the primitive decomposition of s.

/**
 * @param {string} s
 * @return {string}
 */
var removeOuterParentheses = function (s) {
    // start is going to be the beginning of the 
    // current group or the last parenthesis of the
    // last group
    let start = 0
    let string = ""
    // use a frequency table to keep track of how many 
    // times our parenthesis show up
    let freq = {
        "(": 0,
        ")": 0
    }
    for(let i = 0; i < s.length; i++) {
        freq[s[i]] += 1
        // Do you have an equal amount of opening
        // and closing brackets???
        if (freq["("] === freq[")"]) {
            // using substring to grab a group and place
            // it into our string.
            string += s.substring(start + 1, i);
            // creates a new start point 
            start = i + 1;
        }
    }
    return string
};
