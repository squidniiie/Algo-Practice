/**
 * @param {number[]} nums
 * @param {number} target
 * @return {number[]}
 */
// var twoSum = function(nums, target) {
//     for(let i=0; i < nums.length-1; i++){
//        for(j = i + 1; j < nums.length; j++){
//         if(nums[i]+ nums[j] === target){
//             return [i,j]
//         }
//        } 
//     }
// };
var twoSum = function (nums, target) {
    let map = new Map()
    for(let i =0; i < nums.length; i++) {
        let key = nums[i];
        if(map.has(key) === false){
            map.set(target - key, i)
        }else {
            return [map.get(key), i]
        }
    }
}
Solution is 95.16% faster and 51.85% less memory 
var twoSum = function(nums, target) {
    let map = {}
    for(let i = 0; i < nums.length; i++){
        let left = nums[i]
        let right = target - left
        if( right in map) {
            return [map[right], i]
        }
        map[left] = i
    }
};